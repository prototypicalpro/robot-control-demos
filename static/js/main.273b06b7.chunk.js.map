{"version":3,"sources":["components/AutoSizer.tsx","robot-sim-utils/useKeyPress.ts","components/SlideShow.tsx","robot-sim-utils/Constants.ts","robot-sim-utils/applyRobotEnvironment.ts","robot-sim-utils/DataWindow.ts","robot-sim-utils/MotorModel.ts","components/ControllerEditor.tsx","components/RobotSim.tsx","components/Page.tsx","reportWebVitals.ts","index.tsx"],"names":["AutoSizer","children","style","className","React","widthHeight","setWidthHeight","elemRef","current","size","getBoundingClientRect","width","height","ref","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","code","has","upHandler","window","addEventListener","removeEventListener","SlideShow","index","setIndex","keyUpIndex","setKeyUpIndex","shiftPressed","Set","arrowLeftPressed","arrowRightPressed","length","slides","map","c","i","Carousel","Item","active","activeIndex","onSelect","interval","indicators","controls","fade","OBJECT_ID","COLLISION_CATEGORY","makeCarComposite","xx","yy","wheelSize","wheelFriction","color","wheelAOffset","wheelBOffset","wheelYOffset","bodyGroup","Body","nextGroup","car","Composite","create","label","body","Bodies","rectangle","collisionFilter","category","CARS","mask","WALLS","group","density","render","fillStyle","rotate","Math","PI","wheelBack","circle","friction","wheels","wheelFront","axelBack","Constraint","bodyB","pointB","x","y","bodyA","stiffness","visible","axelFront","add","Common","nextId","nextCategory","DataWindow","initial","curDenque","this","Denque","data","push","shift","toArray","peekAt","MotorModel","maxTorque","stuckPowerThresh","stuckAngularVelocityThresh","frictionCoef","deltaTime","motorAngularVelocity","power","totalXForce","abs","CODE_DEFAULT","trim","ControllerEditor","initialCode","onCodeUpdate","setCode","error","setError","Controller","controllerInstance","Function","Error","step","e","toString","split","display","flexDirection","value","onValueChange","highlight","Prism","languages","javascript","padding","preClassName","WINDOW_SIZE","MOTOR_SETTINGS","driveWheel","wheel","force","applyForce","Vector","position","circleRadius","RobotSim","cars","simulationActive","setSimulationActive","simulationNumber","setSimulationNumber","curTick","setCurTick","factoryRef","proccessedTickRef","canvasRef","engineRef","Engine","rendererRef","runnerRef","wheelsRef","pointBRef","tickWindowRef","canvasHeight","canvasWidth","world","wallOpts","isStatic","walls","World","id","SENSOR_B","SENSOR","strokeStyle","lineWidth","applyRobotEnvironment","powerCoef","flag","flagPole","carParts","positionWindow","velocityWindow","powerWindow","motorBack","motorFront","controller","Render","canvas","engine","options","wireframes","showAngleIndicator","background","Events","on","timestamp","lookAt","min","max","Runner","stop","undefined","start","delta","recent","addData","dist","velocity","sensorDistance","time","sensorVelocity","frontPower","angularVelocity","backPower","res","count","tickVal","values","timeDomain","axisStyle","text","fontSize","fill","title","gridArea","overflowY","factory","flexGrow","Button","variant","onClick","xDomain","yDomain","margin","left","tickTotal","NO_CONTROLLER","TIME_CONTROLLER_INITIAL","TIME_CONTROLLER","BANG_BANG_CONTROLLER","P_CONTROLLER","PI_CONTROLLER","PID_CONTROLLER","PID_CONTROLLER_COMPLETE","MOTION_PROFILE_CONTROLLER","ALL_SLIDES","src","gridColumn","frameBorder","allow","allowFullScreen","Page","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.273b06b7.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype WidthHeight = {\n  width: number;\n  height: number;\n};\n\nexport default function AutoSizer({\n  children,\n  style,\n  className\n}: {\n  children: (size: WidthHeight) => React.ReactNode;\n  style?: React.CSSProperties;\n  className?: string;\n}) {\n  const [widthHeight, setWidthHeight] = React.useState<WidthHeight>();\n  const elemRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    if (elemRef.current) {\n      const size = elemRef.current.getBoundingClientRect();\n      setWidthHeight({width: size.width, height: size.height});\n    }\n  }, [setWidthHeight]);\n\n  return (\n    <div\n      ref={elemRef}\n      style={{width: '100%', height: '100%', ...style}}\n      className={className}\n    >\n      {widthHeight ? children(widthHeight) : null}\n    </div>\n  );\n}\n","import * as React from 'react';\n\nexport default function useKeyPress(targetKey: Set<string>) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = React.useState(false);\n\n  // Add event listeners\n  React.useEffect(() => {\n    // If pressed key is our target key then set to true\n    const downHandler = ({code: key}: KeyboardEvent) => {\n      if (targetKey.has(key)) {\n        setKeyPressed(true);\n      }\n    };\n\n    // If released key is our target key then set to false\n    const upHandler = ({code: key}: KeyboardEvent) => {\n      if (targetKey.has(key)) {\n        setKeyPressed(false);\n      }\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey]);\n\n  return keyPressed;\n}\n","import * as React from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\nimport useKeyPress from '../robot-sim-utils/useKeyPress';\n\nexport type Slide = (param: {\n  width: number;\n  height: number;\n  active: boolean;\n}) => React.ReactNode;\n\nexport default function SlideShow({\n  width,\n  height,\n  children,\n  style,\n  className\n}: {\n  width: number;\n  height: number;\n  children: Slide[];\n  style?: React.CSSProperties;\n  className?: string;\n}) {\n  const [index, setIndex] = React.useState(0);\n  const [keyUpIndex, setKeyUpIndex] = React.useState(0);\n  const shiftPressed = useKeyPress(\n    new Set(['ShiftLeft', 'ShiftRight', 'Shift'])\n  );\n  const arrowLeftPressed = useKeyPress(new Set(['ArrowLeft']));\n  const arrowRightPressed = useKeyPress(new Set(['ArrowRight']));\n\n  React.useEffect(() => {\n    if (!shiftPressed) setKeyUpIndex(index);\n    else if (keyUpIndex === index) {\n      if (arrowRightPressed && index < children.length - 1) setIndex(index + 1);\n      else if (arrowLeftPressed && index > 0) setIndex(index - 1);\n    }\n  }, [\n    shiftPressed,\n    index,\n    arrowLeftPressed,\n    arrowRightPressed,\n    children.length,\n    keyUpIndex\n  ]);\n\n  const slides = React.useMemo(\n    () =>\n      children.map((c, i) => (\n        <Carousel.Item key={i}>\n          {c({width, height, active: index === i})}\n        </Carousel.Item>\n      )),\n    [children, height, index, width]\n  );\n\n  return (\n    <Carousel\n      activeIndex={index}\n      onSelect={setIndex}\n      interval={null}\n      indicators={false}\n      controls={false}\n      fade={true}\n      style={style}\n      className={className}\n    >\n      {slides}\n    </Carousel>\n  );\n}\n","import {Common, Body} from 'matter-js';\n\nexport enum OBJECT_ID {\n  SENSOR_B = Common.nextId()\n}\n\nexport enum COLLISION_CATEGORY {\n  WALLS = Body.nextCategory(),\n  CARS = Body.nextCategory(),\n  SENSOR = Body.nextCategory()\n}\n","import {World, Bodies, Body, Composite, Constraint} from 'matter-js';\nimport {OBJECT_ID, COLLISION_CATEGORY} from './Constants';\n\n// const NO_DENSITY = 1e-30;\n\n/**\n * Creates a composite with simple car setup of bodies and constraints.\n *\n * @param {number} xx\n * @param {number} yy\n * @param {number} width\n * @param {number} height\n * @param {number} wheelSize\n * @returns {composite} A new composite car body\n */\nexport function makeCarComposite(\n  xx: number,\n  yy: number,\n  width: number,\n  height: number,\n  wheelSize: number,\n  wheelFriction: number,\n  color?: {\n    flag?: string;\n    body?: string;\n    wheels?: string;\n    flagPole?: string;\n  }\n): [Composite, {body: Body; wheelBack: Body; wheelFront: Body}] {\n  const wheelBase = 20,\n    wheelAOffset = -width * 0.5 + wheelBase,\n    wheelBOffset = width * 0.5 - wheelBase,\n    wheelYOffset = width * 0.5 - wheelBase;\n  // flagXOffset = width * -0.5,\n  // flagYOffset = height * -0.5;\n  const bodyGroup = Body.nextGroup(false);\n\n  const car = Composite.create({label: 'Car'});\n  const body = Bodies.rectangle(xx, yy, width, height, {\n    collisionFilter: {\n      category: COLLISION_CATEGORY.CARS,\n      mask: COLLISION_CATEGORY.WALLS,\n      group: bodyGroup\n    },\n    density: 0.0001,\n    render: {\n      fillStyle: color?.body\n    }\n  });\n\n  Body.rotate(body, Math.PI);\n\n  const wheelBack = Bodies.circle(\n    xx + wheelAOffset,\n    yy + wheelYOffset,\n    wheelSize,\n    {\n      collisionFilter: {\n        category: COLLISION_CATEGORY.CARS,\n        mask: COLLISION_CATEGORY.WALLS\n      },\n      friction: wheelFriction,\n      render: {\n        fillStyle: color?.wheels\n      }\n    }\n  );\n\n  const wheelFront = Bodies.circle(\n    xx + wheelBOffset,\n    yy + wheelYOffset,\n    wheelSize,\n    {\n      collisionFilter: {\n        category: COLLISION_CATEGORY.CARS,\n        mask: COLLISION_CATEGORY.WALLS\n      },\n      friction: wheelFriction,\n      render: {\n        fillStyle: color?.wheels\n      }\n    }\n  );\n\n  const axelBack = Constraint.create({\n    bodyB: body,\n    pointB: {x: wheelAOffset, y: wheelYOffset},\n    bodyA: wheelBack,\n    stiffness: 1,\n    length: 0,\n    render: {\n      visible: false\n    }\n  });\n\n  const axelFront = Constraint.create({\n    bodyB: body,\n    pointB: {x: wheelBOffset, y: wheelYOffset},\n    bodyA: wheelFront,\n    stiffness: 1,\n    length: 0,\n    render: {\n      visible: false\n    }\n  });\n\n  // const particleRadius = 5;\n  // const rowCount = 5;\n  // const flagPole = Composites.softBody(\n  //   xx + flagXOffset - particleRadius,\n  //   yy + flagYOffset - particleRadius * (2 * rowCount - 1),\n  //   2,\n  //   rowCount,\n  //   0,\n  //   0,\n  //   true,\n  //   particleRadius,\n  //   {\n  //     render: {\n  //       visible: true,\n  //       fillStyle: color?.flagPole\n  //     },\n  //     density: 0.001,\n  //     slop: 0.005,\n  //     collisionFilter: {\n  //       category: COLLISION_CATEGORY.CARS,\n  //       mask: COLLISION_CATEGORY.WALLS,\n  //       group: bodyGroup\n  //     }\n  //   },\n  //   {\n  //     stiffness: 0.5\n  //   }\n  // );\n\n  // const leftFlagMountPoint = flagPole.bodies[flagPole.bodies.length - 2];\n  // const rightFlagMountPoint = flagPole.bodies[flagPole.bodies.length - 1];\n\n  // const flagBodyLeft = Constraint.create({\n  //   bodyB: body,\n  //   pointB: {x: flagXOffset, y: flagYOffset},\n  //   bodyA: leftFlagMountPoint,\n  //   stiffness: 1,\n  //   length: 0\n  // });\n\n  // const flagBodyRight = Constraint.create({\n  //   bodyB: body,\n  //   pointB: {x: flagXOffset + 2 * particleRadius, y: flagYOffset},\n  //   bodyA: rightFlagMountPoint,\n  //   stiffness: 1,\n  //   length: 0\n  // });\n\n  // const flagRadius = (4 * particleRadius) / Math.sqrt(3);\n  // const flagTriangle = Bodies.polygon(\n  //   xx + flagXOffset - 2 * particleRadius - 2,\n  //   yy + flagYOffset - particleRadius * (rowCount + 1),\n  //   3,\n  //   flagRadius,\n  //   {\n  //     density: NO_DENSITY,\n  //     collisionFilter: {\n  //       category: COLLISION_CATEGORY.CARS,\n  //       mask: COLLISION_CATEGORY.WALLS,\n  //       group: bodyGroup\n  //     },\n  //     render: {\n  //       fillStyle: color?.flag\n  //     }\n  //   }\n  // );\n\n  // const flagMount = Constraint.create({\n  //   bodyB: flagPole.bodies[2],\n  //   pointB: {x: 0, y: 0},\n  //   bodyA: flagTriangle,\n  //   pointA: {x: flagRadius / 2, y: 0},\n  //   stiffness: 0.9\n  // });\n\n  Composite.add(car, body);\n  Composite.add(car, wheelBack);\n  Composite.add(car, wheelFront);\n  Composite.add(car, axelBack);\n  Composite.add(car, axelFront);\n  // Composite.add(car, flagPole);\n  // Composite.add(car, flagBodyLeft);\n  // Composite.add(car, flagBodyRight);\n  // Composite.add(car, flagTriangle);\n  // Composite.add(car, flagMount);\n\n  return [\n    car,\n    {\n      body,\n      wheelBack,\n      wheelFront\n    }\n  ];\n}\n\nexport function applyRobotEnvironment(\n  world: World,\n  width: number,\n  height: number,\n  color?: {\n    walls?: string;\n  }\n) {\n  // walls\n  const wallOpts = {\n    isStatic: true,\n    render: {fillStyle: color?.walls},\n    collisionFilter: {\n      category: COLLISION_CATEGORY.WALLS,\n      mask: COLLISION_CATEGORY.CARS\n    }\n  };\n  World.add(world, [\n    // walls\n    Bodies.rectangle(width / 2, 0, width, 50, wallOpts),\n    Bodies.rectangle(width / 2, height, width, 50, wallOpts),\n    Bodies.rectangle(width, height / 2, 50, height, wallOpts),\n    Bodies.rectangle(0, height / 2, 50, height, wallOpts)\n  ]);\n  // create the destination point\n  const pointB = Bodies.rectangle(width * 0.8, height / 2, 1, height, {\n    isStatic: true,\n    id: OBJECT_ID.SENSOR_B,\n    collisionFilter: {\n      category: COLLISION_CATEGORY.SENSOR\n    },\n    render: {\n      strokeStyle: 'black',\n      fillStyle: 'transparent',\n      lineWidth: 1\n    }\n  });\n  World.add(world, pointB);\n\n  return {\n    pointB\n  };\n}\n","import Denque from 'denque';\n\nexport default class DataWindow<Data> {\n  private readonly size: number;\n  private readonly initial: Data[];\n  private curDenque: Denque<Data>;\n\n  constructor(size: number, initial: Data[] = []) {\n    this.size = size;\n    this.initial = [...initial];\n    this.curDenque = new Denque(initial);\n  }\n\n  addData(data: Data) {\n    this.curDenque.push(data);\n    if (this.curDenque.length >= this.size) this.curDenque.shift();\n  }\n\n  values(): readonly Data[] {\n    return this.curDenque.toArray();\n  }\n\n  recent(index: number = 0): Data {\n    return this.curDenque.peekAt(this.curDenque.length - index - 1) as Data;\n  }\n\n  get(index: number): Data {\n    return this.curDenque.peekAt(index) as Data;\n  }\n\n  reset() {\n    this.curDenque = new Denque(this.initial);\n  }\n\n  count(): number {\n    return this.curDenque.length;\n  }\n}\n","export default class MotorModel {\n  private readonly maxTorque: number;\n  private readonly stuckPowerThresh: number;\n  private readonly stuckAngularVelocityThresh: number;\n  private readonly frictionCoef: number;\n\n  constructor({\n    maxTorque,\n    stuckPowerThresh,\n    stuckAngularVelocityThresh,\n    frictionCoef\n  }: {\n    maxTorque: number;\n    stuckPowerThresh: number;\n    stuckAngularVelocityThresh: number;\n    frictionCoef: number;\n  }) {\n    this.maxTorque = maxTorque;\n    this.stuckPowerThresh = stuckPowerThresh;\n    this.stuckAngularVelocityThresh = stuckAngularVelocityThresh;\n    this.frictionCoef = frictionCoef;\n  }\n\n  step(deltaTime: number, motorAngularVelocity: number, power: number) {\n    // apply a force opposite to the direction the robot is currently moving\n    // this simulates the \"internal friction\" of the motors\n    let totalXForce = motorAngularVelocity * this.frictionCoef;\n    // if the power is under a certain threshold and the robot is \"stopped\",\n    // the motor stalls and we stop applying any force\n    if (\n      Math.abs(motorAngularVelocity) >= this.stuckAngularVelocityThresh ||\n      Math.abs(power) >= this.stuckPowerThresh\n    ) {\n      totalXForce += power * this.maxTorque;\n    }\n    // return the force * time\n    return totalXForce * deltaTime;\n  }\n}\n","import * as React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport Prism from 'prismjs';\nimport 'prism-themes/themes/prism-vsc-dark-plus.css';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport {ControllerFactory} from '../robot-sim-utils/Controller';\nimport './ControllerEditor.css';\n\nconst CODE_DEFAULT = `\nclass Controller {\n  constructor() {\n\n  }\n\n  step(sensorDistance, time, delta) {\n    return 1\n  }\n}`.trim();\n\nexport default function ControllerEditor({\n  initialCode = CODE_DEFAULT,\n  onCodeUpdate,\n  style = {}\n}: {\n  onCodeUpdate: (code: ControllerFactory) => void;\n  initialCode?: string;\n  style?: React.CSSProperties;\n}) {\n  const [code, setCode] = React.useState(initialCode);\n  const [error, setError] = React.useState<string>();\n\n  React.useEffect(() => {\n    let Controller;\n    try {\n      // I know I know\n      // eslint-disable-next-line no-new-func\n      Controller = Function(`\"use strict\"; ${code}; return Controller;`)();\n      const controllerInstance = new Controller();\n      if (!(controllerInstance instanceof Controller))\n        throw new Error('Not a class');\n      if (!(controllerInstance.step instanceof Function))\n        throw new Error('No step() function on class');\n    } catch (e) {\n      setError(e.toString().split('\\n')[0]);\n      return;\n    }\n    setError('');\n    onCodeUpdate(Controller as ControllerFactory);\n  }, [code, onCodeUpdate]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        ...style\n      }}\n    >\n      <Editor\n        value={code}\n        onValueChange={setCode}\n        highlight={code =>\n          Prism.highlight(code, Prism.languages.javascript, 'javascript')\n        }\n        padding={10}\n        className=\"controller-editor-container\"\n        preClassName=\"controller-editor-highlight\"\n      />\n      <p style={{color: '#d4d4d4'}}>{error}</p>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport {Engine, Render, World, Events, Body, Vector, Runner} from 'matter-js';\nimport '../../node_modules/react-vis/dist/style.css';\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  LineSeriesCanvas\n} from 'react-vis';\nimport Button from 'react-bootstrap/Button';\nimport {\n  applyRobotEnvironment,\n  makeCarComposite\n} from '../robot-sim-utils/applyRobotEnvironment';\nimport DataWindow from '../robot-sim-utils/DataWindow';\nimport MotorModel from '../robot-sim-utils/MotorModel';\nimport {Controller, ControllerFactory} from '../robot-sim-utils/Controller';\nimport ControllerEditor from './ControllerEditor';\nimport './RobotSim.css';\n\nconst CAR_SCALE = 0.8;\nconst WINDOW_SIZE = 300;\nconst GRAPH_TICK_WAIT = 0;\nconst MOTOR_SETTINGS = {\n  frictionCoef: -0.001,\n  maxTorque: 0.0006,\n  stuckPowerThresh: 0.05,\n  stuckAngularVelocityThresh: 0.5\n};\n\nfunction driveWheel(wheel: Body, force: number) {\n  Body.applyForce(\n    wheel,\n    Vector.add(wheel.position, Vector.create(0, wheel.circleRadius)),\n    Vector.create(-force, 0)\n  );\n  Body.applyForce(\n    wheel,\n    Vector.add(\n      wheel.position,\n      Vector.create(0, -(wheel.circleRadius as number))\n    ),\n    Vector.create(force, 0)\n  );\n}\n\nconst RobotSim: React.FunctionComponent<{\n  width: number;\n  height: number;\n  cars: {\n    powerCoef: number;\n    color: string;\n  }[];\n  initialCode: string;\n  style?: React.CSSProperties;\n  className?: string;\n  active?: boolean;\n}> = ({style, className, width, height, cars, initialCode, active}) => {\n  const [simulationActive, setSimulationActive] = React.useState(false);\n  const [simulationNumber, setSimulationNumber] = React.useState(1);\n  const [curTick, setCurTick] = React.useState(0);\n  const factoryRef = React.useRef<ControllerFactory>();\n  const proccessedTickRef = React.useRef<number>(0);\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const engineRef = React.useRef(Engine.create());\n  const rendererRef = React.useRef<Render>();\n  const runnerRef = React.useRef<Runner>();\n  const wheelsRef = React.useRef<\n    {\n      wheelFront: Body;\n      wheelBack: Body;\n      body: Body;\n      positionWindow: DataWindow<number>;\n      velocityWindow: DataWindow<number>;\n      powerWindow: DataWindow<number>;\n      motorFront: MotorModel;\n      motorBack: MotorModel;\n      controller: Controller;\n      powerCoef: number;\n      color: string;\n    }[]\n  >();\n  const pointBRef = React.useRef<Body>();\n  const tickWindowRef = React.useRef<DataWindow<DOMHighResTimeStamp>>();\n\n  const canvasHeight = height / 3;\n  const canvasWidth = width;\n\n  // setup engine and world\n  React.useEffect(() => {\n    if (canvasRef.current && factoryRef.current && simulationNumber && active) {\n      // reset the engine\n      engineRef.current = Engine.create();\n      // reset the processed tick and current tick\n      tickWindowRef.current = new DataWindow(WINDOW_SIZE);\n      setCurTick(0);\n      proccessedTickRef.current = 0;\n      setSimulationActive(false);\n      // generate the environment\n      const {pointB} = applyRobotEnvironment(\n        engineRef.current.world,\n        canvasWidth,\n        canvasHeight\n      );\n      pointBRef.current = pointB;\n      // generate a number of cars\n      wheelsRef.current = [];\n      for (const {powerCoef, color} of cars) {\n        const [car, carParts] = makeCarComposite(\n          150,\n          canvasHeight - 95,\n          150 * CAR_SCALE,\n          150 * CAR_SCALE,\n          40 * CAR_SCALE,\n          0.2,\n          {\n            body: `${color}a0`,\n            wheels: `${color}a0`,\n            flag: '#ff4500a0',\n            flagPole: `${color}a0`\n          }\n        );\n        World.add(engineRef.current.world, car);\n        wheelsRef.current.push({\n          ...carParts,\n          positionWindow: new DataWindow(WINDOW_SIZE),\n          velocityWindow: new DataWindow(WINDOW_SIZE),\n          powerWindow: new DataWindow(WINDOW_SIZE),\n          motorBack: new MotorModel(MOTOR_SETTINGS),\n          motorFront: new MotorModel(MOTOR_SETTINGS),\n          controller: new factoryRef.current(),\n          powerCoef,\n          color\n        });\n      }\n      // generate a renderer\n      rendererRef.current = Render.create({\n        canvas: canvasRef.current,\n        engine: engineRef.current,\n        options: {\n          width: canvasWidth,\n          height: canvasHeight,\n          wireframes: false,\n          showAngleIndicator: true,\n          background: '#d4d4d4'\n          // showCollisions: true\n        } as any\n      });\n      // set react to tick with the engine\n      Events.on(engineRef.current, 'afterTick', ({timestamp}) =>\n        setCurTick(timestamp)\n      );\n      // fit the render viewport to the scene\n      Render.lookAt(rendererRef.current, {\n        min: {x: 0, y: 0},\n        max: {x: canvasWidth, y: canvasHeight}\n      });\n      // run the Renderer once for a start freeze frame\n      Render.world(rendererRef.current);\n      // start the physics runner\n      // we let it run independently because react is too slow to keep up\n      runnerRef.current = Runner.create();\n      // cleanup\n      return () => {\n        // stop the runner\n        if (runnerRef.current) {\n          Runner.stop(runnerRef.current);\n          runnerRef.current = undefined;\n        }\n      };\n    }\n  }, [\n    canvasRef,\n    engineRef,\n    rendererRef,\n    canvasWidth,\n    canvasHeight,\n    cars,\n    factoryRef,\n    simulationNumber,\n    active\n  ]);\n\n  // handle play/pause changes\n  React.useEffect(() => {\n    if (runnerRef.current && engineRef.current && simulationActive && active) {\n      Runner.start(runnerRef.current, engineRef.current);\n      return () => Runner.stop(runnerRef.current as Runner);\n    }\n  }, [runnerRef, engineRef, simulationActive, active]);\n\n  // handle ticks\n  React.useEffect(() => {\n    if (\n      rendererRef.current &&\n      tickWindowRef.current &&\n      wheelsRef.current &&\n      pointBRef.current &&\n      proccessedTickRef.current < curTick\n    ) {\n      // render the world\n      Render.world(rendererRef.current);\n      // every someodd ticks, update the graph\n      if (proccessedTickRef.current + GRAPH_TICK_WAIT < curTick) {\n        // indicate we have processed the next tick\n        proccessedTickRef.current = curTick;\n        // calculate vectors\n        const delta = curTick - (tickWindowRef.current.recent() || 0);\n        // update tick state\n        tickWindowRef.current.addData(curTick);\n        // update the model cars\n        for (const {\n          wheelBack,\n          wheelFront,\n          motorBack,\n          motorFront,\n          controller,\n          body,\n          positionWindow,\n          velocityWindow,\n          powerWindow,\n          powerCoef\n        } of wheelsRef.current) {\n          // calculate velocities and such\n          const dist = pointBRef.current.position.x - body.position.x;\n          const velocity = positionWindow.recent()\n            ? -(dist - positionWindow.recent()) / (delta / 1e3)\n            : 0;\n          // update other state\n          positionWindow.addData(dist);\n          velocityWindow.addData(velocity);\n          const rawPower = Math.min(\n            1,\n            Math.max(\n              -1,\n              controller.step({\n                sensorDistance: dist,\n                delta: delta / 1e3, // milliseconds to seconds\n                time: curTick / 1e3,\n                sensorVelocity: velocity\n              })\n            )\n          );\n          // run the controller\n          const power = rawPower * powerCoef;\n          powerWindow.addData(power);\n          // step the motors based on the values we just calculated\n          const frontPower = motorFront.step(\n            delta,\n            wheelFront.angularVelocity,\n            power\n          );\n          const backPower = motorBack.step(\n            delta,\n            wheelBack.angularVelocity,\n            power\n          );\n          // apply forces\n          driveWheel(wheelFront, frontPower);\n          driveWheel(wheelBack, backPower);\n        }\n      }\n    }\n  }, [curTick]);\n\n  // generate data by zipping the tickWindow with all the other properties\n  const res = React.useMemo(() => {\n    if (tickWindowRef.current?.count?.() && wheelsRef.current) {\n      const tickVal = tickWindowRef.current.values();\n      return {\n        timeDomain: [tickVal[0], tickVal[tickVal.length - 1]],\n        position: wheelsRef.current.map(({positionWindow, color}) => ({\n          data: positionWindow.values().map((y, i) => ({x: tickVal[i], y})),\n          color\n        })),\n        velocity: wheelsRef.current.map(({velocityWindow, color}) => ({\n          data: velocityWindow.values().map((y, i) => ({x: tickVal[i], y})),\n          color\n        })),\n        power: wheelsRef.current.map(({powerWindow, color}) => ({\n          data: powerWindow.values().map((y, i) => ({x: tickVal[i], y})),\n          color\n        }))\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [proccessedTickRef.current]);\n\n  const axisStyle = {\n    text: {fontSize: '1.2em', fill: '#d4d4d4'},\n    title: {fontSize: '1.1em', fill: '#d4d4d4'}\n  };\n\n  return (\n    <div className=\"robot-sim-container\" style={{width, height, ...style}}>\n      <canvas\n        className={className}\n        ref={canvasRef}\n        width={width}\n        height={canvasHeight}\n        style={{gridArea: 'canvas'}}\n      />\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          gridArea: 'editor',\n          overflowY: 'auto'\n        }}\n      >\n        <ControllerEditor\n          onCodeUpdate={factory => (factoryRef.current = factory)}\n          initialCode={initialCode}\n          style={{flexGrow: 2}}\n        />\n        <span>\n          <Button\n            variant=\"danger\"\n            size=\"lg\"\n            onClick={() => setSimulationNumber(simulationNumber + 1)}\n          >\n            Reload\n          </Button>{' '}\n          {simulationActive ? (\n            <Button\n              variant=\"warning\"\n              size=\"lg\"\n              onClick={() => {\n                setSimulationActive(false);\n              }}\n            >\n              Pause\n            </Button>\n          ) : (\n            <Button\n              variant=\"success\"\n              size=\"lg\"\n              onClick={() => {\n                setSimulationActive(true);\n              }}\n            >\n              Play\n            </Button>\n          )}\n        </span>\n      </div>\n      {res && (\n        <XYPlot\n          xDomain={res.timeDomain}\n          yDomain={[-1.1, 1.1]}\n          width={width / 5}\n          height={(height / 3) * 2}\n          margin={{left: 65}}\n        >\n          <HorizontalGridLines />\n          {res.power.map(({data, color}, i) => (\n            <LineSeriesCanvas key={i} data={data} color={color} />\n          ))}\n          <XAxis style={axisStyle} title=\"Time (ms)\" tickTotal={5} />\n          <YAxis style={axisStyle} title=\"Power\" />\n        </XYPlot>\n      )}\n      {res && (\n        <XYPlot\n          xDomain={res.timeDomain}\n          yDomain={[-400, width - 200]}\n          width={width / 5}\n          height={(height / 3) * 2}\n          margin={{left: 65}}\n        >\n          <HorizontalGridLines />\n          {res.position.map(({data, color}, i) => (\n            <LineSeriesCanvas key={i} data={data} color={color} />\n          ))}\n          <XAxis style={axisStyle} title=\"Time (ms)\" tickTotal={5} />\n          <YAxis style={axisStyle} title=\"Distance (px)\" />\n        </XYPlot>\n      )}\n      {res && (\n        <XYPlot\n          xDomain={res.timeDomain}\n          yDomain={[-600, 1000]}\n          width={width / 5}\n          height={(height / 3) * 2}\n          margin={{left: 65}}\n        >\n          <HorizontalGridLines />\n          {res.velocity.map(({data, color}, i) => (\n            <LineSeriesCanvas key={i} data={data} color={color} />\n          ))}\n          <XAxis style={axisStyle} title=\"Time (ms)\" tickTotal={5} />\n          <YAxis style={axisStyle} title=\"Velocity (px/s)\" />\n        </XYPlot>\n      )}\n    </div>\n  );\n};\n\nexport default RobotSim;\n","import * as React from 'react';\nimport AutoSizer from './AutoSizer';\nimport SlideShow, {Slide} from './SlideShow';\nimport RobotSim from './RobotSim';\nimport './Page.css';\n\nconst NO_CONTROLLER = `\nclass Controller {\n  step() {\n    return 0\n  }\n}`.trim();\n\nconst TIME_CONTROLLER_INITIAL = `\nconst DRIVE_TIME = 0;\n\nclass Controller {\n  constructor() {\n    this.initialTime = null\n  }\n\n  step({time}) {\n    if (this.initialTime === null)\n      this.initialTime = time\n    const timeHasPassed = time - this.initialTime\n    if (timeHasPassed > DRIVE_TIME) return 0\n    else return 1\n  }\n}`.trim();\n\nconst TIME_CONTROLLER = `\nconst DRIVE_TIME = 1.8;\n\nclass Controller {\n  constructor() {\n    this.initialTime = null\n  }\n\n  step({time}) {\n    if (this.initialTime === null)\n      this.initialTime = time\n    const timeHasPassed = time - this.initialTime\n    if (timeHasPassed > DRIVE_TIME) return 0\n    else return 1\n  }\n}`.trim();\n\nconst BANG_BANG_CONTROLLER = `\nclass Controller {\n  step({sensorDistance}) {\n    if (sensorDistance > 0) return 1\n    else if (sensorDistance < 0) return -1\n    else return 0\n  }\n}`.trim();\n\nconst P_CONTROLLER = `\nconst P_TERM = 0;\n\nclass Controller {\n  step({sensorDistance}) {\n    return sensorDistance*P_TERM;\n  }\n}`.trim();\n\nconst PI_CONTROLLER = `\nconst P_TERM = 0.003;\nconst I_TERM = 0;\nconst I_CUTOFF = 0;\n\nclass Controller {\n  constructor() {\n    this.integral = 0\n  }\n\n  step({sensorDistance, delta}) {\n    if (Math.abs(sensorDistance) > I_CUTOFF) {\n      this.integral = 0\n    }\n    else {\n      this.integral += sensorDistance*delta\n    }\n\n    return sensorDistance*P_TERM + this.integral*I_TERM\n  }\n}`.trim();\n\nconst PID_CONTROLLER = `\nconst P_TERM = 0.003, I_TERM = 0.001, I_CUTOFF = 20, D_TERM = 0;\n\nclass Controller {\n  constructor() { this.integral = 0, this.prevDistance = null }\n\n  step({sensorDistance, delta}) {\n    if (this.prevDistance === null) this.prevDistance = sensorDistance\n\n    if (Math.abs(sensorDistance) > I_CUTOFF) this.integral = 0\n    else this.integral += sensorDistance * delta\n\n    let der = (sensorDistance - this.prevDistance) / delta\n    this.prevDistance = sensorDistance\n\n    return sensorDistance*P_TERM + this.integral*I_TERM + der*D_TERM\n  }\n}`.trim();\n\nconst PID_CONTROLLER_COMPLETE = `\nconst P_TERM = 0.003, I_TERM = 0.001, I_CUTOFF = 20, D_TERM = .003;\n\nclass Controller {\n  constructor() { this.integral = 0, this.prevDistance = null }\n\n  step({sensorDistance, delta}) {\n    if (this.prevDistance === null) this.prevDistance = sensorDistance\n\n    if (Math.abs(sensorDistance) > I_CUTOFF) this.integral = 0\n    else this.integral += sensorDistance * delta\n\n    let der = (sensorDistance - this.prevDistance) / delta\n    this.prevDistance = sensorDistance\n\n    return sensorDistance*P_TERM + this.integral*I_TERM + der*D_TERM\n  }\n}`.trim();\n\nconst MOTION_PROFILE_CONTROLLER = `\nconst CRUISE_VELOCITY = 200, MAX_ACCEL = 200, CORNER_TIME = CRUISE_VELOCITY / MAX_ACCEL;\nconst V_TERM = 0.0013, P_TERM = -0.004;\n\nclass Controller {\n  constructor() { this.totalDistance = null; this.initialTime = null; }\n\n  getDesiredVelocityAndPosition(time) {\n    const cruiseDistance =\n      this.totalDistance - CRUISE_VELOCITY * CORNER_TIME;\n    const cruiseTime = cruiseDistance / CRUISE_VELOCITY;\n    const backCornerTime = CORNER_TIME + cruiseTime;\n\n    let velocity;\n    if (time < CORNER_TIME) {\n      velocity = (CRUISE_VELOCITY / CORNER_TIME) * time;\n    } else if (time < backCornerTime) {\n      velocity = CRUISE_VELOCITY;\n    } else {\n      velocity = Math.max(\n        (CRUISE_VELOCITY / CORNER_TIME) * (backCornerTime - time) +\n          CRUISE_VELOCITY,\n        0\n      );\n    }\n\n    let position;\n    if (time < CORNER_TIME) position = 0.5 * MAX_ACCEL * Math.pow(time, 2);\n    else if (time < backCornerTime)\n      position = 0.5 * MAX_ACCEL * Math.pow(CORNER_TIME, 2) + CRUISE_VELOCITY * (time - CORNER_TIME);\n    else if (time < backCornerTime + CORNER_TIME)\n      position =\n        0.5 * MAX_ACCEL * Math.pow(CORNER_TIME, 2) +\n        CRUISE_VELOCITY * cruiseTime +\n        CRUISE_VELOCITY * (time - backCornerTime) - 0.5 * MAX_ACCEL * Math.pow(time - backCornerTime, 2);\n    else position = this.totalDistance\n\n    console.log(time, position)\n    return {position, velocity};\n  }\n\n  step({sensorDistance, delta, time}) {\n    if (this.totalDistance === null) {\n      this.totalDistance = sensorDistance;\n      this.initialTime = time;\n    }\n\n    const {position, velocity} = this.getDesiredVelocityAndPosition((time - this.initialTime));\n    const error = (this.totalDistance - position) - sensorDistance;\n    return V_TERM*velocity + P_TERM*error;\n  }\n}\n`.trim();\n\nconst ALL_SLIDES: Slide[] = [\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"title-slide\"\n    >\n      <h1>How to get your Robot from point A to point B</h1>\n      <h2>A talk by Noah Koontz</h2>\n    </div>\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">This slide is about me.</h1>\n      <div className=\"image-div me-with-robot-marked\"></div>\n    </div>\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">This slide is about me.</h1>\n      <iframe\n        title=\"autoVid\"\n        src=\"https://drive.google.com/file/d/0BxpTsJb9LFiVMDFTeXZQS0ZVMkE/preview\"\n        className=\"image-div\"\n        width={width - 160}\n        height={height - 250}\n      ></iframe>\n    </div>\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">\n        You are building the software for the Beaver delivery bot.\n      </h1>\n      <div\n        className=\"image-div beaver-bot image-half\"\n        style={{gridColumn: 'span 4'}}\n      />\n      <div\n        className=\"image-div image-half point-list-container\"\n        style={{gridColumn: 'span 2', padding: 20}}\n      >\n        <ul>\n          <li>Use the provided robot hardware.</li>\n          <li>Run entirely autonomously (without user intervention).</li>\n          <li>\n            Get from point A to point B. The distance between point A and point\n            B is fixed.\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">About the Beaver delivery bot</h1>\n      <div\n        className=\"image-div beaver-bot-closer image-half\"\n        style={{gridColumn: 'span 4'}}\n      />\n      <div\n        className=\"image-div image-half point-list-container\"\n        style={{gridColumn: 'span 2', padding: 20}}\n      >\n        <ul>\n          <li>\n            <del>Six</del> Two wheels each driven by a DC motor powered by an\n            internal battery.\n          </li>\n          <li>A millisecond clock.</li>\n          <li>\n            <del>A sensor measuring the distance to point B.</del>\n          </li>\n          <li>\n            <del>A flag.</del>\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[{powerCoef: 1, color: '#FFA500'}]}\n      initialCode={NO_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[{powerCoef: 1, color: '#FFA500'}]}\n      initialCode={TIME_CONTROLLER_INITIAL}\n      active={active}\n    />\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[\n        {powerCoef: 1, color: '#ff0000'},\n        {powerCoef: 0.9, color: '#00ff00'},\n        {powerCoef: 0.8, color: '#0000ff'}\n      ]}\n      initialCode={TIME_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">Never trust a robot to behave consistently</h1>\n      <div\n        className=\"image-div bad-bot image-half\"\n        style={{gridColumn: 'span 4'}}\n      />\n      <div\n        className=\"image-div image-half point-list-container\"\n        style={{gridColumn: 'span 2', padding: 20}}\n      >\n        <ul>\n          <li>\n            Battery voltage, motor quality, weight changes, and more can cause\n            the robot to behave differently\n          </li>\n          <li>\n            In other words, we cannot assume that 1.0 power is the same for\n            every robot.\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">\n        Control Theory: Open-loop vs. closed-loop system\n      </h1>\n      <div className=\"image-div loop-system\" />\n    </div>\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[{powerCoef: 1, color: '#FFA500'}]}\n      initialCode={BANG_BANG_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[\n        {powerCoef: 1, color: '#ff0000'},\n        {powerCoef: 0.9, color: '#00ff00'},\n        {powerCoef: 0.8, color: '#0000ff'}\n      ]}\n      initialCode={BANG_BANG_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[{powerCoef: 1, color: '#FFA500'}]}\n      initialCode={P_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[{powerCoef: 1, color: '#FFA500'}]}\n      initialCode={PI_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[{powerCoef: 1, color: '#FFA500'}]}\n      initialCode={PID_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[\n        {powerCoef: 1, color: '#ff0000'},\n        {powerCoef: 0.9, color: '#00ff00'},\n        {powerCoef: 0.8, color: '#0000ff'}\n      ]}\n      initialCode={PID_CONTROLLER_COMPLETE}\n      active={active}\n    />\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">Feedback vs. feedforward</h1>\n      <div className=\"image-div feedfoward\" />\n    </div>\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">\n        A motion profile describes the desired position of the robot at every\n        point in time.\n      </h1>\n      <div\n        className=\"image-div motion-profile image-half\"\n        style={{gridColumn: 'span 4'}}\n      />\n      <div\n        className=\"image-div image-half point-list-container\"\n        style={{gridColumn: 'span 2', padding: 20}}\n      >\n        <ul>\n          <li>\n            Using a desitination and some contraints about our robot, we can\n            build a model describing our path.\n          </li>\n          <li>\n            This model can then be used to \"feedforward\" into our controller.\n          </li>\n        </ul>\n      </div>\n    </div>\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[{powerCoef: 1, color: '#FFA500'}]}\n      initialCode={MOTION_PROFILE_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height, active}) => (\n    <RobotSim\n      width={width}\n      height={height}\n      cars={[\n        {powerCoef: 1, color: '#ff0000'},\n        {powerCoef: 0.9, color: '#00ff00'},\n        {powerCoef: 0.8, color: '#0000ff'}\n      ]}\n      initialCode={MOTION_PROFILE_CONTROLLER}\n      active={active}\n    />\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"text-image-slide-container\"\n    >\n      <h1 className=\"title-text\">Motion profiling in action</h1>\n      <iframe\n        title=\"motion profiling\"\n        width={width - 160}\n        height={height - 250}\n        src=\"https://www.youtube.com/embed/FUh36RUHzdU?start=6\"\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </div>\n  ),\n  ({width, height}) => (\n    <div\n      style={{\n        width,\n        height\n      }}\n      className=\"title-slide\"\n    >\n      <h1>Questions?</h1>\n      <h2>Now you too are burdened with this knowledge.</h2>\n    </div>\n  )\n];\n\nexport default function Page() {\n  // TODO: detect resize?\n\n  return (\n    <AutoSizer>\n      {({width, height}) => (\n        <SlideShow\n          width={width}\n          height={height}\n          style={{width: '100%', height: '100%'}}\n        >\n          {ALL_SLIDES}\n        </SlideShow>\n      )}\n    </AutoSizer>\n  );\n}\n","function reportWebVitals(onPerfEntry?: () => void): void {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Page from './components/Page';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Page />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}